{"version":3,"sources":["PostBoardPage.js","AddPostPage.js","App.js","serviceWorker.js","index.js"],"names":["PostBoardPage","props","onClick","page_type_setter","posts","post_list","slice","pop","post_list_setter","map","post","index","key","className","title","content","imgs","length","img","src","alt","Title","value","onChange","titleWriter","type","name","maxLength","style","width","Content","contentWriter","cols","rows","Img","view","imgUrls","imgUrl","ControlButtons","inputFileRef","React","useRef","accept","event","imgUrlWriter","ref","display","multiple","current","click","postAdder","AddPostPage","useState","setTitle","setContent","setImgs","target","newPost","push","imgsUrl","files","URL","createObjectURL","App","PageType","setPageType","setPostList","Page","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12c2d0eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Use Function Component with Hook\r\n\r\nfunction PostBoardPage(props){\r\n  const changePage = () => {\r\n    props.page_type_setter(\"AddPostPage\");\r\n  }\r\n  const removePost = () => {\r\n    const posts = props.post_list.slice();\r\n    posts.pop();\r\n    props.post_list_setter(\r\n      posts\r\n    );\r\n  }\r\n  return(\r\n    <>\r\n      <button onClick={changePage}>Add Post</button>\r\n      <button onClick={removePost}>Remove Post</button>\r\n      {props.post_list.map((post,index)=> {\r\n        return(\r\n          <div key={index} className=\"postItem\">\r\n            <div>{post.title}</div>\r\n            <div>{post.content}</div>\r\n            {(post.imgs&&post.imgs.length)?post.imgs.map((img,index) => <img key={index} src={img} alt=\"preview\"/>):<></>}\r\n          </div>\r\n        )\r\n      })}\r\n         </>\r\n  );\r\n}\r\n\r\nexport default PostBoardPage;\r\n","import React from 'react';\r\n\r\n// Use Function Component with Hook\r\n\r\nfunction AddPostPage(props){\r\n    const [title, setTitle] = React.useState(\"\");\r\n    const [content, setContent] = React.useState(\"Please write your post.\");\r\n    const [imgs, setImgs] = React.useState([]);\r\n    const titleWriter = event=>{\r\n        setTitle(event.target.value);\r\n    }\r\n    const contentWriter = event =>{\r\n        setContent(event.target.value);\r\n    }\r\n    const postAdder = () => {\r\n        const newPost = {\r\n            title,content,imgs\r\n        };\r\n        let post_list = props.post_list.slice();\r\n        post_list.push(newPost);\r\n        props.post_list_setter(post_list);\r\n        props.page_type_setter(\"PostBoardPage\");\r\n    }\r\n    const imgUrlWriter = event => {\r\n        const imgsUrl=[];\r\n        for(let index = 0; index < event.target.files.length; index++){\r\n            imgsUrl.push(URL.createObjectURL(event.target.files[index]));\r\n        }\r\n        setImgs(imgsUrl);\r\n    }\r\n    return (\r\n        <>\r\n          <Title title={title} titleWriter={titleWriter}/>\r\n          <Content content={content} contentWriter={contentWriter}/>\r\n          <Img imgUrls={imgs}/>\r\n          <ControlButtons \r\n            page_type_setter={props.page_type_setter}\r\n            postAdder={postAdder}\r\n            imgUrlWriter={imgUrlWriter}\r\n          />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Title(props){\r\n    return (\r\n        <div>\r\n          <span>Title:</span>\r\n          <input \r\n            value={props.title}\r\n            onChange={props.titleWriter} \r\n            type=\"text\" name=\"title\" maxLength=\"10\" \r\n            style={{width: \"20%\"}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Content(props){\r\n    return(\r\n        <div>\r\n          <span>Content:</span>\r\n          <textarea \r\n            value={props.content} \r\n            onChange={props.contentWriter} \r\n            cols=\"50\" rows=\"5\" name=\"content\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Img(props){\r\n    let view =(\r\n        <div>\r\n        <span>Image Preview:</span>\r\n        {/* <img src={props.imgUrls} alt=\"preview\"/> */}\r\n        {props.imgUrls.map((imgUrl,index) => <img key={index} src={imgUrl} alt=\"preview\"/>)}\r\n        </div>\r\n    );\r\n    return (\r\n        <div>\r\n          {(props.imgUrls&&props.imgUrls.length)?view:<></>}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ControlButtons(props){\r\n    const inputFileRef = React.useRef(null);\r\n    const changePage = () => {\r\n        props.page_type_setter(\"PostBoardPage\");\r\n    }\r\n    \r\n    const handleInput = event => {\r\n        props.imgUrlWriter(event)\r\n    }\r\n    \r\n    const handleUpload = () => {\r\n        inputFileRef.current.click();\r\n    }\r\n    return (\r\n        <div>\r\n          <div>\r\n            <input \r\n              type=\"file\" accept=\"image/*\" \r\n              onChange={handleInput} \r\n              ref={inputFileRef} \r\n              style={{display: 'none'}} \r\n              multiple/>\r\n          </div>\r\n          <button onClick={handleUpload}>upload</button>\r\n          <button onClick={props.postAdder}>submit</button>\r\n          <br/>\r\n          <br/>\r\n          <button onClick={changePage}>cancel</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Use Class Component\r\n\r\n// class AddPostPage extends React.Component{\r\n//     constructor(props){\r\n//       super(props);\r\n//       this.state = {\r\n//         title:\"\",\r\n//         content:\"Please write your post.\",\r\n//         img:\"\"\r\n//       }\r\n//       this.titleWriter = this.titleWriter.bind(this);\r\n//       this.contentWriter = this.contentWriter.bind(this);\r\n//       this.postAdder = this.postAdder.bind(this);\r\n//       this.imgUrlWriter = this.imgUrlWriter.bind(this);\r\n//     }\r\n  \r\n//     titleWriter(event){\r\n//       this.setState({title: event.target.value});\r\n//     }\r\n//     contentWriter(event){\r\n//       this.setState({content: event.target.value});\r\n//     }\r\n//     imgUrlWriter(event){\r\n//         console.log(event.target.files);\r\n//       this.setState({\r\n//         img: URL.createObjectURL(event.target.files[0])\r\n//       });\r\n//     }\r\n//     postAdder(){\r\n//       const newPost = this.state;\r\n//       let post_list = this.props.post_list;\r\n//       post_list.push(newPost);\r\n//       this.props.post_list_setter(post_list);\r\n//       this.props.page_type_setter(\"PostBoardPage\");\r\n//     }\r\n  \r\n//     render(){\r\n//       return (\r\n//         <>\r\n//           <Title title={this.state.title} titleWriter={this.titleWriter}/>\r\n//           <Content content={this.state.content} contentWriter={this.contentWriter}/>\r\n//           <Img imgUrl={this.state.img}/>\r\n//           <ControlButtons \r\n//             page_type_setter={this.props.page_type_setter}\r\n//             postAdder={this.postAdder}\r\n//             imgUrlWriter={this.imgUrlWriter}\r\n//           />\r\n//         </>\r\n//       )\r\n//     }\r\n//   }\r\n  \r\n//   class Title extends React.Component{\r\n//     render(){\r\n//       return (\r\n//         <div>\r\n//           <span>Title:</span>\r\n//           <input \r\n//             value={this.props.title}\r\n//             onChange={this.props.titleWriter} \r\n//             type=\"text\" name=\"title\" maxLength=\"10\" \r\n//             style={{width: \"20%\"}}/>\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n  \r\n//   class Content extends React.Component{\r\n//     render(){\r\n//       return (\r\n//         <div>\r\n//           <span>Content:</span>\r\n//           <textarea \r\n//             value={this.props.content} \r\n//             onChange={this.props.contentWriter} \r\n//             cols=\"50\" rows=\"5\" name=\"content\"/>\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n//   class Img extends React.Component{\r\n//     render(){\r\n//         let view =(\r\n//             <div>\r\n//             <span>Image Preview:</span>\r\n//             <img src={this.props.imgUrl} alt=\"preview\"/>\r\n//             </div>\r\n//         );\r\n//       return (\r\n//         <div>\r\n//           {this.props.imgUrl?view:<></>}\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n//   class ControlButtons extends React.Component{\r\n//     constructor(props){\r\n//       super(props)\r\n//       this.changePage = this.changePage.bind(this);\r\n//       this.handleInput = this.handleInput.bind(this);\r\n//       this.handleUpload = this.handleUpload.bind(this);\r\n//       this.inputFileRef = React.createRef();\r\n//     }\r\n  \r\n//     changePage(){\r\n//       this.props.page_type_setter(\"PostBoardPage\");\r\n//     }\r\n  \r\n//     handleInput(event){\r\n//       this.props.imgUrlWriter(event)\r\n//     }\r\n  \r\n//     handleUpload(){\r\n//       this.inputFileRef.current.click();\r\n//     }\r\n  \r\n//     render(){\r\n//       return (\r\n//         <div>\r\n//           <div>\r\n//             <input \r\n//               type=\"file\" accept=\"image/*\" \r\n//               onChange={this.handleInput} \r\n//               ref={this.inputFileRef} \r\n//               style={{display: 'none'}} \r\n//               multiple/>\r\n//           </div>\r\n//           <button onClick={this.handleUpload}>upload</button>\r\n//           <button onClick={this.props.postAdder}>submit</button>\r\n//           <br/>\r\n//           <br/>\r\n//           <button onClick={this.changePage}>cancel</button>\r\n//         </div>\r\n//       )\r\n//     }\r\n// }\r\n\r\nexport default AddPostPage;","import React from 'react';\nimport './App.css';\nimport PostBoardPage from './PostBoardPage';\nimport AddPostPage from './AddPostPage';\n\n// Use Function Component with Hook\nfunction App(){\n  const [PageType,setPageType] = React.useState(\"PostBoardPage\");\n  const [post_list,setPostList] = React.useState([]);\n  const page_type_setter = type => {\n    setPageType(type);\n  }\n  const post_list_setter = list => {\n    setPostList(list);\n  }\n  const components = {\n    PostBoardPage: PostBoardPage,\n    AddPostPage: AddPostPage\n  }\n  let Page = components[PageType];\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Page \n          post_list = {post_list}\n          page_type_setter = {page_type_setter}\n          post_list_setter = {post_list_setter}\n        />\n      </header>\n    </div>\n  );\n}\n\n//Use Class Component  \n\n// class App extends React.Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       PageType: \"PostBoardPage\",\n//       post_list: []\n//     }\n//     this.page_type_setter = this.page_type_setter.bind(this);\n//     this.post_list_setter = this.post_list_setter.bind(this);\n\n//     this.components = {\n//       PostBoardPage: PostBoardPage,\n//       AddPostPage: AddPostPage\n//     }\n//   }\n\n//   page_type_setter(type){\n//     this.setState({PageType: type});\n//   }\n\n//   post_list_setter(list){\n//     this.setState({post_list: list});\n//   }\n\n//   render(){\n//     let {PageType, post_list} = this.state;\n//     let components = this.components;\n//     let Page = components[PageType];\n//         return (\n//           <div className=\"App\">\n//             <header className=\"App-header\">\n//               <Page \n//                post_list = {post_list}\n//                page_type_setter = {this.page_type_setter}\n//                post_list_setter = {this.post_list_setter}\n//               />\n//             </header>\n//           </div>\n//         );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}